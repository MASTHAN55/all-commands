                                                            (minikube)
1. imprative way (manual): single node cluster:
    * kubectl run pod1 --image nginx          : creating pod1 with base image.
    * kubectl get po                          : list all pods.
    * kubectl get po -o wide                  : info of pods.
    * kubectl delete po pod1                  : delete pod1.
    * kubectl describe po pod1                : show all info of pod1.

2. declarative way (manifest file -automate)  
    * kubectl create -f pod.yml               : executing file & creating pod.
    * kubectl api-resources                   : show all shortcuts.

3. kubectl api-resources                      : use case

============================================================================= [REPLICASET] =============================================================================  
3. replikaset(rs):
    * kubectl get po --show-labels            : show labels of pod.
    * kubectl get rs                          : show all replicas.
    * kubectl get rs -o wide                  : show all info of replicas
    * kubectl describe rs movies              : show all info of movies
    * kubectl get po --show-labels            : show all labels

    * kubectl describe po -l tier=vali        : show only tier=vali labels of pod.
    * kubectl delete pod -l tier!=vali        : delete all pods which not has tair.
 
    * kubectl delete po pod1                  : for delete pod.
    * kubectl scale rc/movies --replicas=10   : create 10 pods at a time.
    * kubectl edit rs/movies                  : edit replicas (rs con't have rollback option)
    * kubectl describe po | grep -i image     : show current image & check edited updates.

============================================================================== [DEPLOYMENT] ===============================================================================
4. deployment (roling statagy).
    * kubectl get deploy                        : show all depolyment list.
    * kubectl get deploy -o deploy              : sho wall onfo of deploy.

    * kubectl edit deploy/movies                : edit movies deploy.
    * kubectl roolout history deploy/movies     : show all history of movies.
    * kubectl rollout undo deploy/movies        : back to old (role back).
    * kubectl rollout status deploy/movies      : 
    * kubectl rollout pause deploy/movies       : cont switch role back.
    * kubectl rollout resume deploy movies      : give switching permissions.

    * kubectl scale deploy/movies --replicas=10 : increase the replicas.
    * kubectl rollout undo deploy/movies        : back to old (role back).
  
====================================================================[NAME-SPACESES & SERVICES]====================================================================================================
5. namespace creation (name space can do isolate only):
    * kubectl create ns dev     : create dev name space.
    * kubectl get ns            : list all name spaces.
    * kubectl po -A             : show all pods.

    * kubectl config set-context --current --namespace=dev        : switch one name space to dev name space.
    * kubectl config set-context --current --namespace=default    : switch one name space to dev name space.
    * kubectl config view                                         : show current name space.
    * kubectl run dev3 --image=masthan733/paytm:latest            : create pod in dev3 namespace.
    * kubetcl get po -n dev                                       : list only dev namespace onfo. 

    * kubectl delete pod dev1 -n dev                              : delete pod in dev name space.
    * kubectl delete pod --all                                    : delete all pods.
    * kubectl delete ns dev                                       : delete dev namespace.
    * kubectl delete po --all -n dev                              : delete all in dev name space.

6. service:(Do in name space) used to expose the application.
    * kubectl get svc                 : show all services.
    * kubectl get svc,deploy          : show svc,deploy.
    * kubectl get svc -o wide         : show all info. 
    * kubectl apply -f abc.yml        : update(edits) manifest file.

============================================================================= [kops] =================================================================================
  1. (multinode cluster):
       * kubectl get no                                              : show all nodes.
       * 
  2. edting:
       * kops edit ig --name=masthan.k8s nodes-us-east-1a            : editing slave node instance group.
       * kops edit ig --name=masthan.k8s master-us-east-1a           : editing master instance group.

  3. updating & deleting:
       * kops update cluster --name masthan.k8s nodes-us-east-1a     : updating nodes cluster (update mandotory for every changes).
       * kops rolling-update cluster                                 : Do after update.

       * kops update --name=masthan.k8s.local --yes --admin          : update cluster. (update mandotory for every changes).
       * kops delete cluster --name masthan.k8s.local --yes          : for delete cluster.

  4. delete total cluster:
      * kops delete cluster --name masthan641.k8s.local --state=s3://masthan641.k8s.local --yes   : delete total cluster at a time.


 2. INSTALL KUBECTL AND KOPS (manual creating)
     * curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
     * wget https://github.com/kubernetes/kops/releases/download/v1.25.0/kops-linux-amd64
     * chmod +x kops-linux-amd64 kubectl
     * mv kubectl /usr/local/bin/kubectl
     * mv kops-linux-amd64 /usr/local/bin/kops

2.1 setup path (manual path):
     vim .bashrc
     export PATH=$PATH:/usr/local/bin/  -- > save and exit
     source .bashrc

 3. CREATING BUCKET (manual creating)
      * aws s3api create-bucket --bucket masthan.k8s.local --region us-east-1
      * aws s3api put-bucket-versioning --masthan.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
      * export KOPS_STATE_STORE=s3://masthan.k8s.local

=====================================================================[autoscale & metrics]=============================================================================================
1. install metricserver for script(FOR KOPS):
     * kubectl top po           : show metrics.

2. horigental pod auto scaling:
     * kubectl autoscale deployment movies-deploy --cpu-percent=20 --min=1 --max=10       : auto scaling

     * kubectl get po --watch           : do terminal
     * kubectl exec -it --name copy-podname -- /bin/bish     : login to particular pod

3. installing stress:
     * apt install stress -y
     * stress
     * copy example and paste 60sec

               ex: pods ----> metric server ---> hpa
                      ----------------------------------------------------------------------------------------------

1. quotas:
    * kubectl get quota      : show all quotas.
    * kubectl get events     : show all info.

===================================================================================[r-back]===========================================================================
1. mkdir dev1 && cd dev1

1.1 Generate a key using OpenSSL: --------------(key)
    * openssl genrsa -out dev1.key 2048

2. Generate a Client Sign Request (CSR) : ------(csr)
    * openssl req -new -key dev1.key -out dev1.csr -subj "/CN=dev1/O=group1"
    * ls ~/.minikube/ (if you can see "ca.key", "ca.cert" it's good)

3. Generate the certificate (CRT): 
    * openssl x509 -req -in dev1.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out dev1.crt -days 500
                          
** Create a user
4. Set a user entry in kubeconfig
   * kubectl config set-credentials dev1 --client-certificate=dev1.crt --client-key=dev1.key

5. Set a context entry in kubeconfig
   * kubectl config set-context dev1-context --cluster=minikube --user=dev1            //finally usr created without any permmisions.
   * kubectl config view

6. Switching to the created user
   * kubectl config use-context dev1-context
   * $ kubectl config current-context # check the current context
   * dev1-context
                         
 7. ** Do minikube context. [ns,role,rolebind.. DO minikube]
     * kubectl config use-context minikube      //switch to minikube
     * kubectl create ns dev
     * kubectl config set-context --current --namespace=dev      //switch to dev context

8. check all once:
    1. switch dev-context  (kubectl config view)
    2. switch dev-namespace
    3. switch dev-user

9. Note:
    1. if you want to give any permissions for role(like-create, delete) edit role first and give permissions(like-list, watch) 
       you need to switch "minikube-context" and apply file and switch "minikube-context" to "dev-context".

        * kubectl config use-context minikube  : switch to minikube context.
        * kubectl apply -f role.yml            : update(edits) manifest file.
 

vim role.yml (Do dev-user)
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: dev
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---                                 
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: dev
subjects:
- kind: User
  name: dev1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # must match the name of the Role
  apiGroup: rbac.authorization.k8s.io 
                    =================================================================================================



