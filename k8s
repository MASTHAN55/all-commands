1.imprative way (manual):
  * kubectl run pod1 --image=nginx        // creating pod1
  * kubectl get po                        // list all pods
  * kubectl get pod -o wide               // info of pods
  * kubectl delete pod pod1               // delete pod1

2.decralative way (manifest file -automate):
  * kubectl create -f pod.yml             // executing file & creating pod.
  * kubectl api-resources                 // show all shortcuts.
============================================================================= [REPLICASET] =============================================================================  
3.peplikaset(rs):
  * kubectl get po --show-labels              // show labels of pod.
  *
  * kubectl describe po -l tier=vali          // show only tier=vali labels of pod.
  * kubectl delete pod -l tier!=vali          // delete all pods.
  * kubectl delete po pod1                    // for delete pod.
  * kubectl scale rc/movies --replicas=10     // create 10 pods at a time.

============================================================================== [DEPLOYMENT] ===============================================================================
4.deployment (roling statagy).
  * kubectl get deploy                        // show all depolyment list.
  * kubectl get deploy -o deploy              // sho wall onfo of deploy.
  * kubectl edit deploy/movies                // edit movies deploy.
  * kubectl roolout history deploy/movies     // 
  * kubectl rollout undo deploy/movies        // back to old (role back).
  * kubectl rollout status deploy/movies      // 
  * kubectl rollout pause deploy/movies       // cont switch role back.
  * kubectl rollout resume deploy movies      // give switching permissions.
=============================================================================[NAME-SPACESES]====================================================================================================
5.
  * kubectl create ns dev     // create dev name space.
  * kubectl get ns            // list all name spaces.
  * kubectl po -A             // show all pods.

  * kubectl config set-context --current --namespace=dev        // switch one name space to dev name space.
  * kubectl config view                                         // show current name space.
  * kubectl run dev3 --image=masthan733/paytm:latest            // create pod in dev3 namespace.
  * kubetcl get po -n dev                                       // list only dev namespace onfo. 

  * kubectl delete pod dev1 -n dev                              // delete pod in dev name space.
  * kubectl delete pod --all                                    // delete all pods.
  * kubectl delete ns dev                                       // delete dev namespace.
  * kubectl delete po --all -n dev                              // delete all in dev name space.
============================================================================= [kops] =================================================================================
  * kubectl get no                                              // show all nodes.
  * 
  * kops edit ig --name=masthan.k8s nodes-us-east-1a            // editing node instance group.
  * kops edit ig --name=masthan.k8s master-us-east-1a           // editing master instance group.
  * kops updata cluster --name masthan.k8s nodes-us-east-1a     // updating cluster.
  * kops rolling-update cluster                                 // Do after update.

  * kops update --name=masthan.k8s.local --yes --admin          // update cluster. 
  * kops delete cluster --namemasthan.k8s.local --yes           // for delete cluster.

  * kops delete cluster --name masthan641.k8s.local --state=s3://masthan641.k8s.local --yes   // delete total cluster at a time.

==============================================================================[]=============================================================================================
* kubectl top po           // show metrics.
* kubectl autoscale deployment movies-deploy --cpu-percent=20 --min=1 --max=10       // auto scaling
* kubectl get po --watch           // do terminal
* kubectl exec -it --name copy-podname -- /bin/bish     // login to particular pod
* apt install stress -y
* stress
* copy example and paste 60sec


===================================================================================[r-back]===========================================================================
 1. Generate a key using OpenSSL: 
    * openssl genrsa -out dev1.key 2048

2. Generate a Client Sign Request (CSR) : 
   * openssl req -new -key dev1.key -out dev1.csr -subj "/CN=dev1/O=group1"
   * ls ~/.minikube/ 

3. Generate the certificate (CRT): 
   * openssl x509 -req -in dev1.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out dev1.crt -days 500
                           ============================================================================================================
** Create a user
1. Set a user entry in kubeconfig
   kubectl config set-credentials dev1 --client-certificate=dev1.crt --client-key=dev1.key

2.Set a context entry in kubeconfig
  kubectl config set-context dev1-context --cluster=minikube --user=dev1            //finally usr created without role permmisions.
  kubectl config view

3.Switching to the created user
  kubectl config use-context dev1-context
  $ kubectl config current-context # check the current context
  dev1-context

Do minikube context.
vim role.yml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: dev
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: dev
subjects:
- kind: User
  name: dev1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # must match the name of the Role
  apiGroup: rbac.authorization.k8s.io



