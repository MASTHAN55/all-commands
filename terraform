                                                                  [Routine life]
1. Normal commands:
    terrform init        : download pluggins in (.terraform )... (.terraform.lock.hcl).
    terrform plan        : creating an execution plan.
    terrfom apply        : to create resource (created_EC2).
    terraform destroy    : destroy the server.
    terraform fmt        : create structor.

2. Destroy:
    terraform destroy -target="aws_instance.one[3]" --auto-approve                                  : destroy singe target resource.
    terraform destroy -target="aws_instance.one[5]" -target="aws_instance.two[2]"--auto-approve     : destroy multi target resources.

3. tfvars:
    terraform init                                            : install plugins.
    terraform plan -var-file="dev.tfvars"                     : plan selected.
    terraform apply -var-file="dev.tfvars" -auto-approve      : creating resources for dev-server.
    terraform destroy -var-file="dev.tfvars" -auto-approve    : destroy the dev-server.

4. taint & replace (replace old code to new code):
    terraform state list                                               : list the resources.
    terraform apply -replace="aws_instance.one[0]" --auto-approve      : recreate selected one. (new version command)
    terraform taint aws_vpc.one[0]                                     : recreate selected resource. (old version command)
  
5. workspace:
    terraform workspace new dev         : creating new workspace.
    terraform workspace list            : to list workspace.
    terraform workspace select dev      : switch to dev workspace.
    terraform workspace show            : show current workspace.
    terraform workspace delete dev      : delete dev workspace.
Note:
  1. we need to empty the workspace before delete.
  2. we con't delete current workspace, we can switch and delete.
  3. we con't delete default workspace.

6. s3 Backend setup(state file backup to s3 for all users):
   1. create one-s3 bucket(manual).
   2. "" follow manual guide for code""
   3. terraform init -migrate-state -auto-approve       : share info to s3 bucket...   [got to official web "backend code:s3" for code].
Note:
  1. it will store terraform statefile in bucket.
  2. when we modify the infra it will update the statefile in bucket.

     terraform state list                                     : to list the resources.
     terraform state show aws_vpc.two                         : show selected info.
     terraform state mv aws_subnet.two aws_subnet.three       : to rename state file.
     terraform state rm aws_subnet.three                      : to remove state info of a resource.
     terraform state pull                                     : just print info form s3-bucket.

7. updates(update old version to new version terraform):
     terraform init -upgrate                                  : upgrate new version and old version(this command use for both).

8. providers:
    terraform providers                               : show all providers. 

9. refrash:
    terraform refresh                                 : refresh the state file.
    terraform plan -generate-config-out=ec2.tf        : transfor info server to terraform, generated__ by Terraform (cat ec2.tf).
